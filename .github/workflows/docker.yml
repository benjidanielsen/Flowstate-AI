name: Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write  # Required for cosign keyless signing

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ctx:
          - .
          - ./backend
          - ./frontend
          - ./python-worker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive sanitized image name
        id: sanitize
        run: |
          ctx="${{ matrix.ctx }}"
          sanitized="${ctx#./}"
          if [ -z "$sanitized" ] || [ "$sanitized" = "." ]; then
            sanitized="root"
          fi
          sanitized="${sanitized//\//-}"
          echo "name=$sanitized" >> "$GITHUB_OUTPUT"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=${{ steps.sanitize.outputs.name }}-
            ${{ steps.sanitize.outputs.name }}

      - name: Build & push ${{ matrix.ctx }}
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.ctx }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Sign image with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}"
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }}

      - name: Generate SBOM with syft
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}
          format: spdx-json
          output-file: sbom-${{ steps.sanitize.outputs.name }}.spdx.json
          upload-artifact: true
          upload-release-assets: false

      - name: Attach SBOM to image
        run: |
          echo "Attaching SBOM to image"
          cosign attach sbom --sbom sbom-${{ steps.sanitize.outputs.name }}.spdx.json \
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }}

      - name: Sign SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing SBOM"
          cosign sign --yes --attachment sbom \
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }}

      - name: Trivy image scan ${{ matrix.ctx }}
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }}
          format: sarif
          output: trivy-${{ steps.sanitize.outputs.name }}.sarif
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results ${{ matrix.ctx }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ steps.sanitize.outputs.name }}.sarif
          category: trivy-${{ steps.sanitize.outputs.name }}

      - name: Verify image signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Verifying image signature"
          cosign verify \
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

      - name: Generate attestation summary
        run: |
          echo "## Supply Chain Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Measures Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Image signed with cosign (keyless)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated (SPDX format)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM attached to image" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM signed with cosign" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Signature verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Verify image signature" >> $GITHUB_STEP_SUMMARY
          echo "cosign verify \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-identity-regexp=\"https://github.com/${{ github.repository }}/*\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-oidc-issuer=https://token.actions.githubusercontent.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Download and verify SBOM" >> $GITHUB_STEP_SUMMARY
          echo "cosign verify-attestation \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.sanitize.outputs.name }}@${{ steps.build-push.outputs.digest }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --type spdx \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-identity-regexp=\"https://github.com/${{ github.repository }}/*\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  --certificate-oidc-issuer=https://token.actions.githubusercontent.com" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

