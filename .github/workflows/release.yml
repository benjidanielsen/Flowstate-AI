name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Extract version
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Validate semantic version
        id: validate
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid semantic version: $VERSION"
          else
            echo "is_valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid semantic version: $VERSION"
            echo "Expected format: v<major>.<minor>.<patch>[-<prerelease>]"
            exit 1
          fi

  build-artifacts:
    needs: validate-version
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hash }}
    strategy:
      matrix:
        component:
          - backend
          - frontend
          - python-worker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.component != 'python-worker'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Set up Python
        if: matrix.component == 'python-worker'
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Build ${{ matrix.component }}
        run: |
          cd ${{ matrix.component }}
          if [ -f "package.json" ]; then
            npm install
            npm run build || echo "No build script"
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            pip install build
            python -m build || echo "No build configured"
          fi

      - name: Create artifact archive
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          ARTIFACT_NAME="${{ matrix.component }}-${VERSION}.tar.gz"
          tar -czf "$ARTIFACT_NAME" -C ${{ matrix.component }} .
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=$(pwd)/$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Generate artifact hash
        id: hash
        run: |
          HASH=$(sha256sum "${{ env.ARTIFACT_PATH }}" | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "SHA256: $HASH"

      - name: Sign artifact with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing artifact: ${{ env.ARTIFACT_NAME }}"
          cosign sign-blob --yes \
            --bundle "${{ env.ARTIFACT_NAME }}.cosign.bundle" \
            "${{ env.ARTIFACT_PATH }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-${{ needs.validate-version.outputs.version }}
          path: |
            ${{ env.ARTIFACT_PATH }}
            ${{ env.ARTIFACT_NAME }}.cosign.bundle
          retention-days: 90

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ${{ matrix.component }}
          format: spdx-json
          output-file: ${{ matrix.component }}-sbom.spdx.json
          upload-artifact: true
          upload-release-assets: false

  generate-provenance:
    needs: [validate-version, build-artifacts]
    permissions:
      actions: read
      id-token: write
      contents: write
      attestations: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: "${{ needs.build-artifacts.outputs.hashes }}"
      upload-assets: true
      provenance-name: "provenance-${{ needs.validate-version.outputs.version }}.intoto.jsonl"

  create-release:
    needs: [validate-version, build-artifacts, generate-provenance]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "First release of Flowstate-AI $VERSION" >> CHANGELOG.md
          else
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Supply Chain Security" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "This release includes:" >> CHANGELOG.md
          echo "- ‚úÖ SLSA Level 3 provenance attestation" >> CHANGELOG.md
          echo "- ‚úÖ Signed artifacts (cosign)" >> CHANGELOG.md
          echo "- ‚úÖ Software Bill of Materials (SBOM)" >> CHANGELOG.md
          echo "- ‚úÖ Vulnerability scanning (Trivy)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Verification" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "\`\`\`bash" >> CHANGELOG.md
          echo "# Verify artifact signature" >> CHANGELOG.md
          echo "cosign verify-blob \\" >> CHANGELOG.md
          echo "  --bundle <artifact>.cosign.bundle \\" >> CHANGELOG.md
          echo "  --certificate-identity-regexp=\"https://github.com/${{ github.repository }}/*\" \\" >> CHANGELOG.md
          echo "  --certificate-oidc-issuer=https://token.actions.githubusercontent.com \\" >> CHANGELOG.md
          echo "  <artifact>" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "# Verify SLSA provenance" >> CHANGELOG.md
          echo "slsa-verifier verify-artifact \\" >> CHANGELOG.md
          echo "  --provenance-path provenance-$VERSION.intoto.jsonl \\" >> CHANGELOG.md
          echo "  --source-uri github.com/${{ github.repository }} \\" >> CHANGELOG.md
          echo "  <artifact>" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md
          
          cat CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            release-artifacts/**/*
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}
          generate_release_notes: true

      - name: Generate release summary
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          echo "## üéâ Release $VERSION Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find release-artifacts -type f -name "*.tar.gz" | while read file; do
            BASENAME=$(basename "$file")
            SIZE=$(du -h "$file" | cut -f1)
            echo "- üì¶ \`$BASENAME\` ($SIZE)" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Attestations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SLSA Level 3 provenance generated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ All artifacts signed with cosign" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOMs generated for all components" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> $GITHUB_STEP_SUMMARY

  publish-containers:
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - backend
          - frontend
          - python-worker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            latest

      - name: Build & push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}"
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}@${{ steps.build-push.outputs.digest }}

      - name: Verify signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign verify \
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}@${{ steps.build-push.outputs.digest }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

