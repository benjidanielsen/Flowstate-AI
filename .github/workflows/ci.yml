name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci --prefer-offline --no-audit
    
    - name: Run backend linting
      run: |
        cd backend
        npm run lint
      continue-on-error: false
    
    - name: Build backend
      run: |
        cd backend
        npm run build
    
    - name: Run backend tests
      run: |
        cd backend
        npm test -- --ci --maxWorkers=2
      env:
        NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
      continue-on-error: false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --run --reporter=verbose
      env:
        NODE_ENV: test

  test-python-worker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: python-worker/requirements.txt
    
    - name: Install Python dependencies
      run: |
        cd python-worker
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python linting
      run: |
        cd python-worker
        pip install flake8
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Run Python tests
      run: |
        cd python-worker
        python -m pytest tests/ -v --tb=short || echo "No tests found yet"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build --parallel
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Check service health
      run: |
        # Test if services are running
        curl -f http://localhost:3001/api/health || echo "Backend health check failed"
        curl -f http://localhost:8000/health || echo "Python worker health check failed"
    
    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker]
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../python-worker && pip install -r requirements.txt
    
    - name: Build backend
      run: |
        cd backend && npm run build
    
    - name: Start services in background
      run: |
        cd backend && npm start &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"
        cd ../python-worker && python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        WORKER_PID=$!
        echo "Worker PID: $WORKER_PID"
        sleep 15
      env:
        NODE_ENV: production
        PORT: 3001
    
    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:3001/api/health || echo "Backend not ready"
        # Test python worker health  
        curl -f http://localhost:8000/health || echo "Worker not ready"
        # Test API endpoints
        curl -f http://localhost:3001/api/customers/stats || echo "Stats endpoint not ready"
      continue-on-error: true
    
    - name: Cleanup
      if: always()
      run: |
        pkill -f "node.*dist/index.js" || true
        pkill -f "uvicorn" || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../frontend && npm ci --prefer-offline --no-audit
    
    - name: Check for security vulnerabilities
      run: |
        cd backend && npm audit --audit-level=high || true
        cd ../frontend && npm audit --audit-level=high || true
    
    - name: Check for outdated dependencies
      run: |
        cd backend && npm outdated || true
        cd ../frontend && npm outdated || true
