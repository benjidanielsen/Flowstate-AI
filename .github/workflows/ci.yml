name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Auto-cancel outdated workflow runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimize permissions for security best practices
permissions:
  contents: read

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: backend
      run: npm ci --prefer-offline --no-audit
    
    - name: Run backend linting
      working-directory: backend
      run: npm run lint
    
    - name: Build backend
      working-directory: backend
      run: npm run build
    
    - name: Run backend tests
      working-directory: backend
      run: npm test -- --ci --maxWorkers=2
      env:
        NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci --prefer-offline --no-audit
    
    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --run --reporter=verbose
      env:
        NODE_ENV: test

  test-python-worker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: python-worker/requirements.txt
    
    - name: Install Python dependencies
      working-directory: python-worker
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black
    
    - name: Check Python formatting
      working-directory: python-worker
      run: black --check src tests || true
    
    - name: Run Python linting
      working-directory: python-worker
      run: flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=88
    
    - name: Run Python tests
      working-directory: python-worker
      run: |
        if [ -d tests ] && [ "$(find tests -name 'test_*.py' -o -name '*_test.py' | wc -l)" -gt 0 ]; then
          python -m pytest tests/ -v --tb=short
        else
          echo "No tests found in python-worker/tests/, skipping test execution"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: docker compose build --parallel
    
    - name: Start services
      run: |
        docker compose up -d
        sleep 30
    
    - name: Check service health
      run: |
        set -e
        echo "Testing backend health endpoint..."
        curl -f http://localhost:3001/api/health || (echo "Backend health check failed" && exit 1)
        echo "Testing Python worker health endpoint..."
        curl -f http://localhost:8000/health || (echo "Python worker health check failed" && exit 1)
        echo "All health checks passed"
    
    - name: Stop services
      if: always()
      run: docker compose down -v

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker]
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: python-worker/requirements.txt
    
    - name: Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../python-worker && pip install -r requirements.txt
    
    - name: Build backend
      working-directory: backend
      run: npm run build
    
    - name: Start services in background
      run: |
        cd backend && npm start &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"
        cd ../python-worker && python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        WORKER_PID=$!
        echo "Worker PID: $WORKER_PID"
        sleep 15
      env:
        NODE_ENV: production
        PORT: 3001
    
    - name: Run integration tests
      run: |
        set -e
        echo "Testing backend health endpoint..."
        curl -f http://localhost:3001/api/health || (echo "Backend not ready" && exit 1)
        echo "Testing python worker health endpoint..."
        curl -f http://localhost:8000/health || (echo "Worker not ready" && exit 1)
        echo "Testing API endpoints..."
        curl -f http://localhost:3001/api/customers/stats || echo "Stats endpoint check skipped (may require auth)"
        echo "Integration tests completed"
    
    - name: Cleanup
      if: always()
      run: |
        pkill -f "node.*dist/index.js" || true
        pkill -f "uvicorn" || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && npm ci --prefer-offline --no-audit
        cd ../frontend && npm ci --prefer-offline --no-audit
    
    - name: Check for security vulnerabilities
      run: |
        echo "Checking backend for vulnerabilities..."
        cd backend && npm audit --audit-level=high || echo "Backend has vulnerabilities (non-blocking for now)"
        echo "Checking frontend for vulnerabilities..."
        cd ../frontend && npm audit --audit-level=high || echo "Frontend has vulnerabilities (non-blocking for now)"
    
    - name: Check for outdated dependencies
      run: |
        echo "Checking backend for outdated dependencies..."
        cd backend && npm outdated || echo "Some backend dependencies are outdated"
        echo "Checking frontend for outdated dependencies..."
        cd ../frontend && npm outdated || echo "Some frontend dependencies are outdated"
