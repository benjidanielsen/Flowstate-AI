name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set minimal required permissions for security
permissions:
  contents: read
  pull-requests: read

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci --prefer-offline --no-audit

    - name: Run backend linting
      working-directory: backend
      run: npm run lint

    - name: Build backend
      working-directory: backend
      run: npm run build

    - name: Run backend tests
      working-directory: backend
      run: npm test -- --ci --maxWorkers=2
      env:
        NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci --prefer-offline --no-audit

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --run --reporter=verbose
      env:
        NODE_ENV: test

  test-python-worker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: python-worker/requirements.txt

    - name: Install Python dependencies
      working-directory: python-worker
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-asyncio

    - name: Run Python linting (critical errors only)
      working-directory: python-worker
      run: flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run Python tests
      working-directory: python-worker
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --tb=short
        else
          echo "No tests directory found, skipping tests"
        fi

  test-root-python:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-asyncio

    - name: Run Python linting (critical errors only)
      run: flake8 . --exclude=.git,__pycache__,venv,env,node_modules,dist,build --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run root-level Python tests
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --tb=short
        else
          echo "No tests directory found, skipping tests"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker, test-root-python]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: docker compose build --parallel

    - name: Start services
      run: |
        docker compose up -d
        echo "Waiting for services to be ready..."
        sleep 30

    - name: Check service health
      run: |
        echo "Testing backend health..."
        curl -f http://localhost:3001/api/health || exit 1
        echo "Backend is healthy"

        echo "Testing Python worker health..."
        curl -f http://localhost:8000/health || exit 1
        echo "Python worker is healthy"

    - name: Stop services
      if: always()
      run: docker compose down -v

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-python-worker, test-root-python]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Setup Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: python-worker/requirements.txt

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci --prefer-offline --no-audit

    - name: Install Python worker dependencies
      working-directory: python-worker
      run: pip install -r requirements.txt

    - name: Build backend
      working-directory: backend
      run: npm run build

    - name: Start services in background
      run: |
        cd backend && npm start &
        BACKEND_PID=$!
        echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
        echo "Backend started with PID: $BACKEND_PID"

        cd ../python-worker && python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        WORKER_PID=$!
        echo "WORKER_PID=$WORKER_PID" >> $GITHUB_ENV
        echo "Worker started with PID: $WORKER_PID"

        echo "Waiting for services to be ready..."
        sleep 15
      env:
        NODE_ENV: production
        PORT: 3001

    - name: Run integration tests
      run: |
        echo "Testing backend health..."
        curl -f http://localhost:3001/api/health || exit 1
        echo "Backend health check passed"

        echo "Testing Python worker health..."
        curl -f http://localhost:8000/health || exit 1
        echo "Python worker health check passed"

        echo "Testing stats endpoint..."
        curl -f http://localhost:3001/api/customers/stats || exit 1
        echo "Stats endpoint check passed"

    - name: Cleanup services
      if: always()
      run: |
        echo "Cleaning up services..."
        pkill -f "node.*dist/index.js" || true
        pkill -f "uvicorn" || true
        echo "Cleanup complete"

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci --prefer-offline --no-audit

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci --prefer-offline --no-audit

    - name: Check for security vulnerabilities (backend)
      working-directory: backend
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for security vulnerabilities (frontend)
      working-directory: frontend
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for outdated dependencies (backend)
      working-directory: backend
      run: npm outdated
      continue-on-error: true

    - name: Check for outdated dependencies (frontend)
      working-directory: frontend
      run: npm outdated
      continue-on-error: true
