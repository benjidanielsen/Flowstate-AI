name: ci
on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ 'docs/**', '**/*.md', 'LICENSE' ]
  push:
    branches: [ main ]
    paths-ignore: [ 'docs/**', '**/*.md', 'LICENSE' ]

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    name: Discover workspaces
    runs-on: ubuntu-latest
    outputs:
      node_dirs: ${{ steps.detect.outputs.node_dirs }}
      py_dirs: ${{ steps.detect.outputs.py_dirs }}
    steps:
      - uses: actions/checkout@v4
      - id: detect
        run: |
          python3 - <<'PY'
          import os, json
          ignore = {"node_modules", ".git", ".venv", "venv", "dist", "build", ".tox", ".mypy_cache", ".github", "site"}
          node, py = set(), set()
          for d, _, files in os.walk('.'):
              parts = set(d.split(os.sep))
              if parts & ignore:
                  continue
              s = set(files)
              if 'package.json' in s:
                  node.add(d)
              if {'pyproject.toml', 'requirements.txt', 'setup.py'} & s:
                  py.add(d)
          node = sorted(node)
          py = sorted(py)
          print('NODE:', node)
          print('PY:', py)
          out = os.environ['GITHUB_OUTPUT']
          with open(out, 'a') as fh:
              fh.write(f"node_dirs={json.dumps(node)}\n")
              fh.write(f"py_dirs={json.dumps(py)}\n")
          PY

  node-matrix:
    name: Node — lint, typecheck, test, build
    needs: discover
    runs-on: ubuntu-latest
    if: ${{ needs.discover.outputs.node_dirs != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        workdir: ${{ fromJson(needs.discover.outputs.node_dirs) }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.workdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            ${{ matrix.workdir }}/package-lock.json
            ${{ matrix.workdir }}/pnpm-lock.yaml
            ${{ matrix.workdir }}/yarn.lock
      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi
      - name: Lint
        run: |
          if npm run | grep -q "lint"; then npm run lint; else echo "no lint script"; fi
      - name: Typecheck
        run: |
          if npm run | grep -q "typecheck"; then npm run typecheck; \
          elif [ -f tsconfig.json ]; then npx tsc -noEmit; else echo "no typescript"; fi
      - name: Test
        run: |
          if npm run | grep -q "test"; then npm test -- --ci --reporters=default; else echo "no tests"; fi
      - name: Build
        run: |
          if npm run | grep -q "build"; then npm run build; else echo "no build"; fi
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: node-${{ hashFiles(format('{0}/package.json', matrix.workdir)) }}-dist
          path: |
            ${{ matrix.workdir }}/dist
            ${{ matrix.workdir }}/build
          if-no-files-found: ignore
          retention-days: 7

  python-matrix:
    name: Python — lint, typecheck, test
    needs: discover
    runs-on: ubuntu-latest
    if: ${{ needs.discover.outputs.py_dirs != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        workdir: ${{ fromJson(needs.discover.outputs.py_dirs) }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.workdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: |
            ${{ matrix.workdir }}/requirements*.txt
            ${{ matrix.workdir }}/pyproject.toml
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -U ruff mypy pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; \
          elif [ -f pyproject.toml ]; then pip install -e .; \
          else echo "no dependency file"; fi
      - name: Ruff
        run: ruff check .
        continue-on-error: true
      - name: Mypy
        run: mypy || true
      - name: Pytest
        run: |
          if find . -type d -name tests -print -quit | grep -q .; then pytest -q; else echo "no tests"; fi

  vuln-scan:
    name: Trivy filesystem scan (SARIF)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          format: sarif
          output: trivy.sarif
          exit-code: '0'
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

  summary:
    name: CI Summary
    needs: [node-matrix, python-matrix, vuln-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('Flowstate-AI CI')
            core.summary.addList(['Node + Python matrices completed', 'Trivy SARIF uploaded']).write()
