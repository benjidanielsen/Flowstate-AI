import os
import ast
import subprocess
import tempfile

class TestingAgent:
    """
    AI agent that automatically writes and runs tests for all Python and JavaScript code files in the project.
    """

    def __init__(self, project_root):
        self.project_root = project_root

    def find_code_files(self):
        """Find all Python and JavaScript code files in the project."""
        code_files = []
        for root, _, files in os.walk(self.project_root):
            for f in files:
                if f.endswith('.py') or f.endswith('.js'):
                    code_files.append(os.path.join(root, f))
        return code_files

    def generate_python_tests(self, filepath):
        """
        Generate simple unittest tests for Python code by parsing function definitions.
        For each function, create a test stub.
        """
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()

        try:
            tree = ast.parse(source)
        except SyntaxError:
            # Can't parse this file
            return None

        func_names = [node.name for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        if not func_names:
            return None

        test_code = "import unittest\n"
        # Import tested module relatively
        rel_path = os.path.relpath(filepath, self.project_root).replace(os.sep, '.')
        module_name = os.path.splitext(rel_path)[0]
        test_code += f"import {module_name} as tested_module\n\n"

        test_code += f"class Test{os.path.splitext(os.path.basename(filepath))[0].title().replace('_', '')}(unittest.TestCase):\n"
        for fn in func_names:
            test_code += f"    def test_{fn}(self):\n"
            test_code += f"        # TODO: implement test for {fn}\n"
            test_code += f"        self.assertTrue(True)  # Placeholder assertion\n\n"

        test_code += "if __name__ == '__main__':\n"
        test_code += "    unittest.main()\n"
        return test_code

    def generate_javascript_tests(self, filepath):
        """
        Generate simple Jest test stubs for JavaScript code by scanning exported functions.
        """
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()

        # Very naive export function detection
        lines = source.splitlines()
        exported_funcs = []
        for line in lines:
            line = line.strip()
            if line.startswith('export function '):
                parts = line.split()
                if len(parts) >= 3:
                    exported_funcs.append(parts[2].split('(')[0])
            elif line.startswith('module.exports') or line.startswith('exports.'):
                # Detect exports like exports.foo = function() {}
                # or module.exports = { foo: function() {} }
                # Skipping complex parsing, just simple regex-ish
                pass

        if not exported_funcs:
            return None

        test_code = "// Jest test stubs autogenerated by TestingAgent\n"
        test_code += f"const testedModule = require('../{os.path.relpath(filepath, self.project_root).replace(os.sep, '/')}');\n\n"

        test_code += "describe('Auto-generated tests', () => {\n"
        for fn in exported_funcs:
            test_code += f"  test('{fn} should work correctly', () => {{\n"
            test_code += f"    // TODO: implement test for {fn}\n"
            test_code += f"    expect(true).toBe(true);  // Placeholder assertion\n"
            test_code += "  });\n"
        test_code += "});\n"

        return test_code

    def write_test_file(self, original_file, test_code, ext):
        """Write the generated test code to a test file next to the original."""
        if ext == '.py':
            test_filename = os.path.splitext(original_file)[0] + '_test.py'
        else:
            # For JS, create filename.test.js
            base = os.path.splitext(original_file)[0]
            test_filename = base + '.test.js'

        with open(test_filename, 'w', encoding='utf-8') as f:
            f.write(test_code)

        return test_filename

    def run_python_tests(self, test_file):
        """Run unittest tests and capture output."""
        cmd = ['python', test_file]
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=False)
            return result.stdout + '\n' + result.stderr
        except Exception as e:
            return f'Error running python tests: {e}'

    def run_javascript_tests(self, test_file):
        """Run Jest tests and capture output. Assumes jest is installed and available."""
        # Run jest on single file
        cmd = ['npx', 'jest', test_file, '--colors']
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=False)
            return result.stdout + '\n' + result.stderr
        except Exception as e:
            return f'Error running jest tests: {e}'

    def run(self):
        code_files = self.find_code_files()

        results = {}
        for code_file in code_files:
            ext = os.path.splitext(code_file)[1]
            if ext == '.py':
                test_code = self.generate_python_tests(code_file)
                if not test_code:
                    continue
                test_file = self.write_test_file(code_file, test_code, ext)
                output = self.run_python_tests(test_file)
                results[test_file] = output
            elif ext == '.js':
                test_code = self.generate_javascript_tests(code_file)
                if not test_code:
                    continue
                test_file = self.write_test_file(code_file, test_code, ext)
                output = self.run_javascript_tests(test_file)
                results[test_file] = output

        return results

if __name__ == '__main__':
    import sys
    root = sys.argv[1] if len(sys.argv) > 1 else '.'
    agent = TestingAgent(root)
    results = agent.run()
    for test_file, output in results.items():
        print(f'=== Test results for {test_file} ===')
        print(output)
        print('\n')
